{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sadoy\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\Git Repos\\\\todo-app\\\\src\\\\components\\\\Todo\\\\security\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { apiClient } from \"../api/apiClient\";\nimport { executeJwtAuthenticationService } from \"../api/AuthenticationApiService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n/**\r\n * Provides an authentication context for the application.\r\n *\r\n * The context provides the following properties:\r\n * - `isAuthenticated`: a boolean indicating whether the user is authenticated\r\n * - `login`: a function that takes a username and password and returns a boolean indicating whether the\r\n *   authentication was successful\r\n * - `logout`: a function that logs the user out\r\n * - `username`: the username of the authenticated user\r\n * - `token`: the authentication token\r\n */\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction AuthProvider({\n  children\n}) {\n  _s2();\n  const [isAuthenticated, setAuthenticated] = useState(false);\n\n  //setInterval(() =>setNumber(number+1), 1000);\n  //const valueToBeShared = { number, isAuthenticated, setAuthenticated };\n\n  const [username, setUsername] = useState(null);\n  const [token, setToken] = useState(null);\n  // function login(username, password) {\n  //   if (username === \"admin\" && password === \"admin\") {\n  //     setAuthenticated(true);\n  //     setUsername(username);\n  //     return true;\n  //   } else {\n  //     setAuthenticated(false);\n  //     setUsername(null);\n  //     return false;\n  //   }\n  // }\n\n  // async function login(username, password) {\n  //   const baToken = \"Basic \" + window.btoa(username + \":\" + password);\n\n  //   try {\n  //     const response = await executeBasicAuthenticationService(baToken);\n\n  //     if (response.status === 200) {\n  //       setAuthenticated(true);\n  //       setUsername(username);\n  //       setToken(baToken);\n  //       apiClient.interceptors.request.use((config) => {\n  //         console.log(\"intercepted request adding a token\");\n  //         config.headers.Authorization = baToken;\n  //         return config;\n  //       });\n  //       return true;\n  //     } else {\n  //       logout();\n  //       return false;\n  //     }\n  //   } catch (error) {\n  //     logout();\n  //     return false;\n  //   }\n  // } \n  async function login(username, password) {\n    const baToken = \"Basic \" + window.btoa(username + \":\" + password);\n    try {\n      const response = await executeJwtAuthenticationService(baToken);\n      if (response.status === 200) {\n        setAuthenticated(true);\n        setUsername(username);\n        setToken(baToken);\n        apiClient.interceptors.request.use(config => {\n          console.log(\"intercepted request adding a token\");\n          config.headers.Authorization = baToken;\n          return config;\n        });\n        return true;\n      } else {\n        logout();\n        return false;\n      }\n    } catch (error) {\n      logout();\n      return false;\n    }\n  }\n  function logout() {\n    setToken(null);\n    setUsername(null);\n    setAuthenticated(false);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      username,\n      token\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"TN8WqXx3uVoSLaFezWMtgn1oPEU=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","apiClient","executeJwtAuthenticationService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setAuthenticated","username","setUsername","token","setToken","login","password","baToken","window","btoa","response","status","interceptors","request","use","config","console","log","headers","Authorization","logout","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sadoy/OneDrive/Masaüstü/Git Repos/todo-app/src/components/Todo/security/AuthContext.jsx"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\r\nimport { apiClient } from \"../api/apiClient\";\r\nimport { executeJwtAuthenticationService } from \"../api/AuthenticationApiService\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n/**\r\n * Provides an authentication context for the application.\r\n *\r\n * The context provides the following properties:\r\n * - `isAuthenticated`: a boolean indicating whether the user is authenticated\r\n * - `login`: a function that takes a username and password and returns a boolean indicating whether the\r\n *   authentication was successful\r\n * - `logout`: a function that logs the user out\r\n * - `username`: the username of the authenticated user\r\n * - `token`: the authentication token\r\n */\r\n\r\nfunction AuthProvider({ children }) {\r\n  const [isAuthenticated, setAuthenticated] = useState(false);\r\n\r\n  //setInterval(() =>setNumber(number+1), 1000);\r\n  //const valueToBeShared = { number, isAuthenticated, setAuthenticated };\r\n\r\n  const [username, setUsername] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  // function login(username, password) {\r\n  //   if (username === \"admin\" && password === \"admin\") {\r\n  //     setAuthenticated(true);\r\n  //     setUsername(username);\r\n  //     return true;\r\n  //   } else {\r\n  //     setAuthenticated(false);\r\n  //     setUsername(null);\r\n  //     return false;\r\n  //   }\r\n  // }\r\n\r\n  // async function login(username, password) {\r\n  //   const baToken = \"Basic \" + window.btoa(username + \":\" + password);\r\n\r\n  //   try {\r\n  //     const response = await executeBasicAuthenticationService(baToken);\r\n\r\n  //     if (response.status === 200) {\r\n  //       setAuthenticated(true);\r\n  //       setUsername(username);\r\n  //       setToken(baToken);\r\n  //       apiClient.interceptors.request.use((config) => {\r\n  //         console.log(\"intercepted request adding a token\");\r\n  //         config.headers.Authorization = baToken;\r\n  //         return config;\r\n  //       });\r\n  //       return true;\r\n  //     } else {\r\n  //       logout();\r\n  //       return false;\r\n  //     }\r\n  //   } catch (error) {\r\n  //     logout();\r\n  //     return false;\r\n  //   }\r\n  // } \r\n  async function login(username, password) {\r\n    const baToken = \"Basic \" + window.btoa(username + \":\" + password);\r\n\r\n    try {\r\n      const response = await executeJwtAuthenticationService(baToken);\r\n\r\n      if (response.status === 200) {\r\n        setAuthenticated(true);\r\n        setUsername(username);\r\n        setToken(baToken);\r\n        apiClient.interceptors.request.use((config) => {\r\n          console.log(\"intercepted request adding a token\");\r\n          config.headers.Authorization = baToken;\r\n          return config;\r\n        });\r\n        return true;\r\n      } else {\r\n        logout();\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      logout();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function logout() {\r\n    setToken(null);\r\n    setUsername(null);\r\n    setAuthenticated(false);\r\n  }\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ isAuthenticated, login, logout, username, token }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default AuthProvider;\r\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,+BAA+B,QAAQ,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElF,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMR,UAAU,CAACM,WAAW,CAAC;AAAA;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVAE,EAAA,CAFaD,OAAO;AAcpB,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAClC,MAAM,CAACC,eAAe,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;;EAE3D;EACA;;EAEA,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,eAAeiB,KAAKA,CAACJ,QAAQ,EAAEK,QAAQ,EAAE;IACvC,MAAMC,OAAO,GAAG,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACR,QAAQ,GAAG,GAAG,GAAGK,QAAQ,CAAC;IAEjE,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMpB,+BAA+B,CAACiB,OAAO,CAAC;MAE/D,IAAIG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;QAC3BX,gBAAgB,CAAC,IAAI,CAAC;QACtBE,WAAW,CAACD,QAAQ,CAAC;QACrBG,QAAQ,CAACG,OAAO,CAAC;QACjBlB,SAAS,CAACuB,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;UAC7CC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;UACjDF,MAAM,CAACG,OAAO,CAACC,aAAa,GAAGZ,OAAO;UACtC,OAAOQ,MAAM;QACf,CAAC,CAAC;QACF,OAAO,IAAI;MACb,CAAC,MAAM;QACLK,MAAM,CAAC,CAAC;QACR,OAAO,KAAK;MACd;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdD,MAAM,CAAC,CAAC;MACR,OAAO,KAAK;IACd;EACF;EAEA,SAASA,MAAMA,CAAA,EAAG;IAChBhB,QAAQ,CAAC,IAAI,CAAC;IACdF,WAAW,CAAC,IAAI,CAAC;IACjBF,gBAAgB,CAAC,KAAK,CAAC;EACzB;EACA,oBACER,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IACnBC,KAAK,EAAE;MAAExB,eAAe;MAAEM,KAAK;MAAEe,MAAM;MAAEnB,QAAQ;MAAEE;IAAM,CAAE;IAAAN,QAAA,EAE1DA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAAC7B,GAAA,CAnFQF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAqFrB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}